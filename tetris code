#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define WIDTH 64
#define HEIGHT 128

Adafruit_SSD1306 display(128, 64, &Wire, -1);

static const unsigned char PROGMEM logo [] = {
   0x00, 0x00, 0x18, 0x06, 0x01, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

const char pieces_S_l[2][2][4] = {{
  {0, 0, 1, 1}, {0, 1, 1, 2}
},{
  {0, 1, 1, 2}, {1, 1, 0, 0}
}};

const char pieces_S_r[2][2][4] = {{
  {1, 1, 0, 0}, {0, 1, 1, 2}
},{
  {0, 1, 1, 2}, {0, 0, 1, 1}
}};

const char pieces_L_l[4][2][4] = {{
  {0, 0, 0, 1}, {0, 1, 2, 2}
},{
  {0, 1, 2, 2}, {1, 1, 1, 0}
},{
  {0, 1, 1, 1}, {0, 0, 1, 2}
},{
  {0, 0, 1, 2}, {1, 0, 0, 0}
}};

const char pieces_Sq[1][2][4] = {{
  {0, 1, 0, 1}, {0, 0, 1, 1}
}};

const char pieces_T[4][2][4] = {{
  {0, 0, 1, 0},{0, 1, 1, 2}
},{
  {0, 1, 1, 2},{1, 0, 1, 1}
},{
  {1, 0, 1, 1},{0, 1, 1, 2}
},{
  {0, 1, 1, 2},{0, 0, 1, 0}
}};

const char pieces_l[2][2][4] = {{
  {0, 1, 2, 3}, {0, 0, 0, 0}
},{
  {0, 0, 0, 0}, {0, 1, 2, 3}
}};

const short MARGIN_TOP = 19;
const short MARGIN_LEFT = 3;
const short SIZE = 5;
const short TYPES = 6;

short pieceX, pieceY;
short piece[2][4];
word currentType, nextType, rotation;
boolean grid[10][18];

boolean canRotatePressed = true;

long timer, delayer;
int interval = 20, score;

int xPin = A0;
int yPin = A1;
int change = 12;

// New variables for smooth horizontal movement
unsigned long lastMoveTime = 0;
const unsigned long moveRepeatDelay = 150;  // milliseconds between repeated moves
int lastDirection = 0; // -1 for left, 1 for right, 0 for neutral

void setup() {
  pinMode(change, INPUT_PULLUP);
  Serial.begin(9600);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    while(1);
  }

  display.setRotation(1);
  display.clearDisplay();
  display.drawBitmap(3, 23, logo, 64, 82,  WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();
  drawLayout();
  display.display();

  randomSeed(analogRead(0));
  nextType = random(TYPES);
  generate();
  timer = millis();
}

void loop() {
  int xValue = analogRead(xPin);
  int yValue = analogRead(yPin);
  bool rotatePressed = !digitalRead(change);
  unsigned long now = millis();

  // Piece drop timing
  if(now - timer > interval){
    checkLines();
    refresh();
    if(nextCollision()){
      for(short i = 0; i < 4; i++)
        grid[pieceX + piece[0][i]][pieceY + piece[1][i]] = 1;
      generate();
    } else {
      pieceY++;
    }
    timer = now;
  }

  // Smooth horizontal movement
  int dir = 0;
  if (xValue < 400) dir = -1;       // Left
  else if (xValue > 600) dir = 1;   // Right
  else dir = 0;                     // Neutral

  if (dir != 0) {
    if (dir != lastDirection || now - lastMoveTime > moveRepeatDelay) {
      if(!nextHorizontalCollision(piece, dir)){
        pieceX += dir;
        refresh();
      }
      lastMoveTime = now;
      lastDirection = dir;
    }
  } else {
    lastDirection = 0; // reset on joystick center
  }

  // Fast Drop
  if(yValue > 700) interval = 20;
  else interval = 400;

  // Rotate piece
  if(rotatePressed) {
    if(canRotatePressed){
      if(rotation == getMaxRotation(currentType) - 1 && canRotate(0)){
        rotation = 0;
      } else if(canRotate(rotation + 1)){
        rotation++;
      }
      copyPiece(piece, currentType, rotation);
      refresh();
      canRotatePressed = false;
      delayer = now;
    }
  } else if(now - delayer > 50) {
    canRotatePressed = true;
  }
}

void refresh(){
  display.clearDisplay();
  drawLayout();
  drawGrid();
  drawPiece(currentType, 0, pieceX, pieceY);
  display.display();
}

void drawLayout(){
  display.drawLine(0, 15, WIDTH, 15, WHITE);
  display.drawRect(0, 0, WIDTH, HEIGHT, WHITE);
  drawNextPiece();
  char text[6];
  itoa(score, text, 10);
  drawText(text, getNumberLength(score), 7, 4);
}

void drawGrid(){
  for(short x = 0; x < 10; x++)
    for(short y = 0; y < 18; y++)
      if(grid[x][y])
        display.fillRect(MARGIN_LEFT + (SIZE + 1)*x, MARGIN_TOP + (SIZE + 1)*y, SIZE, SIZE, WHITE);
}

void drawPiece(short type, short rotation, short x, short y){
  for(short i = 0; i < 4; i++)
    display.fillRect(MARGIN_LEFT + (SIZE + 1)*(x + piece[0][i]), MARGIN_TOP + (SIZE + 1)*(y + piece[1][i]), SIZE, SIZE, WHITE);
}

void drawNextPiece(){
  short nPiece[2][4];
  copyPiece(nPiece, nextType, 0);
  for(short i = 0; i < 4; i++)
    display.fillRect(50 + 3*nPiece[0][i], 4 + 3*nPiece[1][i], 2, 2, WHITE);
}

void drawText(char text[], short length, int x, int y){
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(x, y);
  display.cp437(true);
  for(short i = 0; i < length; i++)
    display.write(text[i]);
}

short getNumberLength(int n){
  short counter = 1;
  while(n >= 10){
    n /= 10;
    counter++;
  }
  return counter;
}

void copyPiece(short piece[2][4], short type, short rotation){
  switch(type){
    case 0:
      for(short i = 0; i < 4; i++){
        piece[0][i] = pieces_L_l[rotation][0][i];
        piece[1][i] = pieces_L_l[rotation][1][i];
      }
      break;
    case 1:
      for(short i = 0; i < 4; i++){
        piece[0][i] = pieces_S_l[rotation][0][i];
        piece[1][i] = pieces_S_l[rotation][1][i];
      }
      break;
    case 2:
      for(short i = 0; i < 4; i++){
        piece[0][i] = pieces_S_r[rotation][0][i];
        piece[1][i] = pieces_S_r[rotation][1][i];
      }
      break;
    case 3:
      for(short i = 0; i < 4; i++){
        piece[0][i] = pieces_Sq[0][0][i];
        piece[1][i] = pieces_Sq[0][1][i];
      }
      break;
    case 4:
      for(short i = 0; i < 4; i++){
        piece[0][i] = pieces_T[rotation][0][i];
        piece[1][i] = pieces_T[rotation][1][i];
      }
      break;
    case 5:
      for(short i = 0; i < 4; i++){
        piece[0][i] = pieces_l[rotation][0][i];
        piece[1][i] = pieces_l[rotation][1][i];
      }
      break;
  }
}

void generate(){
  currentType = nextType;
  nextType = random(TYPES);
  if(currentType != 5)
    pieceX = random(9);
  else
    pieceX = random(7);
  pieceY = 0;
  rotation = 0;
  copyPiece(piece, currentType, rotation);
}

short getMaxRotation(short type){
  if(type == 1 || type == 2 || type == 5)
    return 2;
  else if(type == 0 || type == 4)
    return 4;
  else
    return 1;
}

boolean nextHorizontalCollision(short piece[2][4], int amount){
  for(short i = 0; i < 4; i++){
    short newX = pieceX + piece[0][i] + amount;
    if(newX > 9 || newX < 0 || grid[newX][pieceY + piece[1][i]])
      return true;
  }
  return false;
}

boolean nextCollision(){
  for(short i = 0; i < 4; i++){
    short y = pieceY + piece[1][i] + 1;
    short x = pieceX + piece[0][i];
    if(y > 17 || grid[x][y])
      return true;
  }
  return false;
}

boolean canRotate(short rotationToCheck){
  short temp[2][4];
  copyPiece(temp, currentType, rotationToCheck);
  return !nextHorizontalCollision(temp, 0);
}

void checkLines(){
  boolean full;
  for(short y = 17; y >= 0; y--){
    full = true;
    for(short x = 0; x < 10; x++){
      full = full && grid[x][y];
    }
    if(full){
      breakLine(y);
      y++;
    }
  }
}

void breakLine(short line){
  for(short y = line; y > 0; y--)
    for(short x = 0; x < 10; x++)
      grid[x][y] = grid[x][y-1];
  for(short x = 0; x < 10; x++)
    grid[x][0] = 0;
  display.invertDisplay(true);
  delay(50);
  display.invertDisplay(false);
  score += 10;
}
